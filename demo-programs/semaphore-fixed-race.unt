/*
 * A program using semaphores to protect a shared memory region.
 * See the language tutorial for details.
 */

thread_def Incrementor {
  // Receive the semaphore
  semaphore sem;
  receive {
    semaphore s -> sem = s;
    _ -> exit(1);
  }
  // Receive the array (shared memory)
  receive {
    int[1] a -> {
      // “lock” the semaphore
      // if another thread gets there first, we’ll wait
      sem--;
      // Access shared memory only once we get past the “lock”
      a[0] += 1;
      // Allow another thread to enter the protected section of code
      sem++;
    }
    _ -> {}
  }
  // Signal we’re done
  parent << "done";
}

thread_def Main {
  // Create a block of shared memory
  int[1] arr = [0];
  // Create the semaphore that will guard access
  semaphore shared_sem = make_semaphore(1);

  for (int i = 0; i < 10000; i++) {
    thread t = spawn Incrementor;
    t << shared_sem;
    t << arr;
  }

  // Wait for all threads to signal done
  for (int i = 0; i < 10000; i++) {
    receive { string s -> {} _ -> exit(1); }
  }
  // See what result we got
  print(string_of_int(arr[0]) + "\n");
}
