/*
 * A program demonstrating race conditions in CPU-parallel mutation of shared memory.
 * See the language tutorial for details.
 */

thread_def Incrementor {
  // Receive an array (shared memory)
  receive {
    // Mutate the shared memory
    int[1] a -> a[0] += 1;
    _ -> exit(1);
  }
  // Signal weâ€™re done
  parent << "done";
}

thread_def Main {
  // Create a block of shared memory
  int[1] arr = [0];
  // Spawn 10000 threads that try to increment the shared memory simultaneously
  for (int i = 0; i < 10000; i++) {
    thread t = spawn Incrementor;
    t << arr;
  }
  // Wait for all threads to signal done
  for (int i = 0; i < 10000; i++) {
    receive { string s -> {} _ -> exit(1); }
  }
  // See what result we got
  print(string_of_int(arr[0]) + "\n");
}
