@use 'sass:color';
@use 'sass:math';
@use './reset';
@use './fonts';



// Colors

$black: #020012;
$white: #fff;
$almost-white: color.scale($white, $alpha: -5%);
$text: $almost-white;
$text-secondary: color.scale($white, $alpha: -30%);
$text-hint: color.scale($white, $alpha: -60%);

body {
  background-color: $black;
  color: $text;
}



// Layout

body {
  display: grid;
  grid-template-columns: 1fr min(65ch, 100%) 1fr;
  & > * { grid-column: 2; }
  padding: 0 1rem;
}

#root-container {
  padding: 4.5rem 0;
  & > :last-child { margin-bottom: 0; }
}

html, body {
  scroll-behavior: smooth;
}



// Typography

:root {
  font-size: 18px;
  font-family: fonts.$body;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1.5;
  vertical-align: baseline;
  text-decoration-thickness: from-font;
  text-underline-position: from-font;
}

h1, h2, h3, h4, h5, h6 {
  font-family: fonts.$heading;
  font-variation-settings: 'wght' 650;
  line-height: 1.1;
  margin: 1.5em 0 0.5em;
  &:first-child { margin-top: 0; }
  color: $white;
}
$ratio: 1.250;
@function rem-size($exponent) {
  @return 1rem * math.pow($ratio, $exponent);
}
h1 { font-size: rem-size(5); font-variation-settings: 'wght' 700; & + h2 { margin-top: 0; } }
h2 { font-size: rem-size(4); & + h3 { margin-top: 1em; } }
h3 { font-size: rem-size(3); & + h4 { margin-top: 1em; } }
h4 { font-size: rem-size(2); & + h5 { margin-top: 1em; } }
h5 { font-size: rem-size(1); & + h6 { margin-top: 1em; } }
h6 { font-size: rem-size(0); }

a {
  color: inherit;
  &[href] {
    text-decoration-color: $text-hint;
    transition: text-decoration-color 0.2s ease;
    &:hover { text-decoration-color: currentColor; }
  }
}

p {
  margin: 0 0 1em;
}

.secondary {
  color: $text-secondary;
}
.hint {
  color: $text-hint;
}



// Code

:root {
  --bleed: 1.75rem;
  --border-width: 1.5px;
}

$border-color: color.mix($black, $white, 85%);


code {
  font-family: fonts.$mono;
  font-variation-settings: 'wght' 100;
}

// Code blocks
@mixin boxed-block {
  $margin: 1.75rem;
  $padding-vertical: 1rem;
  padding: $padding-vertical var(--bleed);
  margin: $margin calc(-1 * var(--bleed));
  border-radius: 0.5rem;
  box-shadow: 0 0 0 var(--border-width) $border-color;
  &:has(+ figcaption) {
    margin-bottom: 0.5rem;
  }
}
pre {
  @include boxed-block;
  line-height: 1.3;
  & > code { font-size: rem-size(-0.5); }
}

// Inline code
@mixin boxed-inline {
  padding: 0.04rem 0.4rem 0.12rem 0.4rem;
  // display: inline-block;
  margin: 0.1em 0.15em;
  background: color.scale($white, $alpha: -92.5%);
  text-align: center;
  border: var(--border-width) solid color.scale($white, $alpha: -92.5%);
  border-radius: 4px;
  font-size: rem-size(-0.5);
}
:not(pre, :has(pre), pre *) code:where(:not(.lowkey)) {
  @include boxed-inline;
}



// Rules

.rule-block {
  @include boxed-block;
  // left margin, rule name, rule separator (either ::= or |), rule body, right margin
  display: grid;
  grid-template-columns: 1fr max-content max-content minmax(0, max-content) 1fr;
  grid-template-rows: auto;
  column-gap: 1em;
  row-gap: 0.1em;

  .rule-name { grid-column: 2; justify-self: right; }
  .rule-separator { grid-column: 3; justify-self: center; }
  .rule-body { grid-column: 4; }
  .rule-body.inline-cases {
    display: flex;
    flex-wrap: wrap;
    column-gap: 0.2em;
    row-gap: 0.1em;

    div {
      display: flex;
      align-items: center;
      gap: 0.25em;
    }
  }

  // Each Rule has its own rule-block div wrapper so that it could be rendered properly without
  // wrapping it in a RuleBlock. Therefore, a RuleBlock containing multiple Rules will contain
  // nested rule-block divs. We can leverage that markup to add space between adjacent rules in the
  // same block.
  & > .rule-block:not(:last-child)::after {
    content: '';
    grid-column: 1 / -1;
    height: 1em;
  }

  // Only the outermost rule block actually displays and dictates the grid
  .rule-block { display: contents; }
  // Squash unintended markup (paragraphs etc.) that Markdown might generate
  :not(:is(.rule-name, .rule-separator, .rule-body, .nonterminal, .terminal, .rule-body > div)) {
    display: contents;
  }

  .nonterminal {
    margin: 0 0.1em;
  }
}

.nonterminal {
  font-style: italic;
  font-variation-settings: 'wght' 500;
  white-space: nowrap;

  &:is(a[href]) {
    text-decoration-color: color.scale($text-hint, $alpha: -50%);
    &:hover { text-decoration-color: $text-hint; }
  }
}

.nonterminal + .nonterminal {
  margin-left: 0.35em;
}

.terminal {
  @include boxed-inline;
  font-family: fonts.$mono;
  white-space: nowrap;
  font-variant-ligatures: none;
}

// Scroll margin for breathing room when anchor link scrolls to a rule-name
// Give the first rule in the block enough room that the border at the top of the block is visible
.rule-name a {
  scroll-margin-top: 2rem;
}
// Subsequent rules in the block don’t need quite that much room
.rule-block .rule-block ~ .rule-block .rule-name a {
  scroll-margin-top: 0.75rem;
}



// Tables
table {
  @include boxed-block;
  --bleed: 0;
  padding: 0;

  td, th {
    padding: 0.5em 1em;
    border: var(--border-width) solid $border-color;

    &:first-child { border-left: 0; }
    &:last-child { border-right: 0; }
  }
  thead tr:first-child th { border-top: 0; }
  tbody tr:last-child td { border-bottom: 0; }
}



// Misc

div.boxed {
  @include boxed-block;
  & > :first-child { margin-top: 0; }
  & > :last-child { margin-bottom: 0; }
}
span.boxed { @include boxed-inline; }

div.boxed:has(> ul) {
  @include boxed-block;
  display: flex;
  flex-wrap: wrap;
  gap: 0.25em 0.5em;

  & > ul {
    list-style: none;
    display: contents;
  }
}

hr {
  border: none;
  margin: 3rem calc(-1 * var(--bleed));
  &:not([class]) { // default; line
    height: var(--border-width);
    background: $border-color;
  }

  &.dinkus { // * * *
    margin: 3rem 0;
    border: none;
    display: flex;
    height: 0;
    overflow: visible;
    font-family: fonts.$mono;

    &::before {
      content: '*\00a0\00a0*\00a0\00a0*';
      display: block;
      margin: 0 auto;
      height: 1em;
      line-height: 1em;
      transform: translateY(-50%);
    }
  }
}

figure {
  margin: 2rem 0;
}

figcaption {
  font-size: math.div(1rem, $ratio);
  color: $text-secondary;
  font-style: italic;
  font-variation-settings: 'wght' 450;

  code { font-style: normal; display: inline; font-size: 1em; }
  & > p:last-child { margin-bottom: 0; }
}

::selection {
  background-color: color.scale(color.mix($white, $black, 15%), $saturation: 5%);
}

ol, ul {
  margin-bottom: 1em;
  ol, ul { margin-bottom: 0; }

  // Space between list items
  li:not(:last-child) { margin-bottom: 0.5em; }
  // A sublist should be spaced apart from text that comes earlier in its parent list item
  li > :is(ul, ol):not(:first-child) { margin-top: 0.5em; }

  li {
    // If a li has only a single paragraph, ignore it
    p { display: contents; }
    // If a li has multiple paragraphs, that’s meaningful
    p ~ p, p:has(~p) { display: block; }
    // Paragraphs need reduced spacing to not make paragraph spaces within a list item seem more
    // significant than spaces between separate list items
    p:not(:last-child) { margin-bottom: 0.35em; }
  }
}
