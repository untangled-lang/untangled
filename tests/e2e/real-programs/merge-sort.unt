thread_def Sorter {
  int start; int end; int[100] arr;
  receive {
    ((int s, int e), int[100] data) -> {
      start = s;
      end = e;
      arr = data;
    }
    _ -> {
      print("Should not be here :)");
      exit(1);
    }
  }

  if (start >= end) {
    parent << "Done";
  } else {
    int mid = (start + end) / 2;
    thread left = spawn Sorter;
    thread right = spawn Sorter;
    left << ((start, mid), arr);
    right << ((mid + 1, end), arr);

    // Wait for both to be done
    for (int i = 0; i < 2; i++) receive { _ -> {} }
    // Merge
    int[100] tmp;
    int counter = 0;
    (int i, int j) = (start, mid + 1);
    while ((i <= mid) && (j <= end)) {
      if (arr[i] <= arr[j]) {
        tmp[counter] = arr[i];
        i++;
      } else {
        tmp[counter] = arr[j];
        j++;
      }
      counter++;
    }
    while (i <= mid) {
      tmp[counter] = arr[i];
      i++;
      counter++;
    }
    while (j <= end) {
      tmp[counter] = arr[j];
      j++;
      counter++;
    }

    for (int z = 0; z < counter; z++) {
      arr[start + z] = tmp[z];
    }

    parent << "Done";
  }
}

thread_def Main {
  int SIZE = 100;
  int[100] arr;

  for (int i = 0; i < SIZE; i++) {
    arr[i] = SIZE - i;
  }

  thread t = spawn Sorter;
  t << ((0, 100 - 1), arr);
  receive { _ -> {} }

bool valid = true;
  for (int i = 0; i < SIZE; i++) {
    valid = valid &&arr[i] == i + 1;
  }

  if (valid) {
    print("Merged correctly\n");
  } else {
    print("Merged incorrectly\n");
  }
}
