thread_def CheckPrime {
  int index;
  int input;
  receive {
    int val -> (index = val);
    _ -> exit(1);
  }
  receive {
    int val -> (input = val);
    _ -> exit(1);
  }
  bool answer = true;
  for (int i = 2; (i < (sqrt(input) / 2)); (i++)) {
    if (((input % i) == 0)) {
      (answer = false);
      break;
    }
  }
  parent << (index, answer);
}

thread_def Main {
  for (int n = 2; (n <= 32); (n++)) {
    thread t = spawn CheckPrime;
    int mersenne_number = ((2 ** n) - 1);
    int index = (n - 2);
    t << index;
    t << mersenne_number;
  }
  bool[31] results;
  for (int i = 0; (i < len(results)); (i++)) {
    int received_index;
    bool received_index_is_prime;
    receive {
      (int ri, bool rip) -> {
        (received_index = i);
        (received_index_is_prime = rip);
      }
      _ -> exit(1);
    }
    results[received_index] = received_index_is_prime;
  }
  for (int i = 0; (i < len(results)); (i++)) {
    print(((to_string(((2 ** (i + 2)) - 1)) + " is prime: ") + to_string(results[i])));
  }
}
